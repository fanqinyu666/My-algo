package org.itheima.hello数据结构.树.二叉树;

public class 解析 {
    /*二叉树（binary tree）是一种非线性数据结构，代表“祖先”与“后代”之间的派生关系，
    体现了“一分为二”的分治逻辑。与链表类似，二叉树的基本单元是节点，每个节点包含值、左子
    节点引用和右子节点引用。*/

    /*每个节点都有两个引用（指针），分别指向左子节点（left-child node）和右子节点
    （right-child node），该节点被称为这两个子节点的父节点（parent node）。当给
    定一个二叉树的节点时，我们将该节点的左子节点及其以下节点形成的树称为该节点的左子树（
    left subtree），同理可得右子树（right subtree）。*/


/*二叉树的退化
 了二叉树的理想结构与退化结构。当二叉树的每层节点都被填满时，
 达到“完美二叉树”；而当所有节点都偏向一侧时，二叉树退化为“链表”。
完美二叉树是理想情况，可以充分发挥二叉树“分治”的优势。
链表则是另一个极端，各项操作都变为线性操作，时间复杂度退化至 O(n)
 。*/



}
