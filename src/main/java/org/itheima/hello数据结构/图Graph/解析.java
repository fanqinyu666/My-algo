package org.itheima.hello数据结构.图Graph;

public class 解析 {
    //如果将顶点看作节点，将边看作连接各个节点的引用（指针），
    // 我们就可以将图看作一种从链表拓展而来的数据结构，相较于
    // 线性关系（链表）和分治关系（树），网络关系（图Graph）的自由度更高，因而更为复杂。



    //根据边是否具有方向，可分为无向图（undirected graph）和有向图（directed graph），如图 9-2 所示。
    //根据所有顶点是否连通，可分为连通图（connected graph）和非连通图（disconnected graph），如图 9-3 所示。
    //我们还可以为边添加“权重”变量，从而得到如图 9-4 所示的有权图（weighted graph）。

    //使用邻接矩阵表示图时，我们可以直接访问矩阵元素以获取边，因此增删查改操作的效率很高，时间复杂度均为 O（1）
    // 。然而，矩阵的空间复杂度为 （n2）
    // ，内存占用较多。
}
